function [delta_x, E] = ErrorStateKalman_sola(r_b_1, r_b_2, r_b_3, E_prev,delta_y, R_nb_hat, f_low, init, f_b_imu, omega_b_imu, g_n_nb, x_n_ins)
    
    deg2rad = pi/180;   
    
    Z3 = zeros(3,3);
    I3 = eye(3); 
    
    Tacc = 1000;
    Tars = 1000;
    
    h = 1/f_low; 
    
    p_n_ins = x_n_ins(1:3);
    v_n_ins = x_n_ins(4:6);
    bacc_b_ins = x_n_ins(7:9);
    q_n_ins = x_n_ins(10:13);
    q_n_ins = q_n_ins/norm(q_n_ins);
    bars_b_ins = x_n_ins(14:16);

    persistent P_hat Q R  
    if init
        std_pos = 2;
        R_pos = std_pos^2*I3;
        std_att = 10 * deg2rad;
        R_att = std_att^2*I3;
        std_vel = 1;
        R_vel = std_vel^2*I3;
        R = blkdiag(R_pos, R_pos, std_vel^2);

        std_acc = 0.01 * sqrt(10);
        Q_acc = std_acc * std_acc * I3; 
        std_acc_bias = 1;
        Q_acc_bias = std_acc_bias * std_acc_bias * I3;

        std_ars = 0.1;
        Q_ars = std_ars * std_ars *I3;
        std_ars_bias = 0.01 * sqrt(10);
        Q_ars_bias = std_ars_bias * std_ars_bias * I3;

        Q = blkdiag( Q_acc, Q_acc_bias, Q_ars, Q_ars_bias ) * h * h;
%         Q = diag([1e-5 * ones(1, 3) 1e-2 * ones(1, 3) 1e-4 * ones(1, 3) 1e-5 * ones(1, 3)]);
      
%        P_hat = diag([1e-6 * ones(1, 3) 1e-4 * ones(1, 3) 1e-4 * ones(1, 3) 1e-3 * ones(1, 3) 1e-3 * ones(1, 3)]);  % Initial error covariance

%         P_hat = diag([ 1e-1 1e-1 1e-1 ...
%                        1e-2 1e-2 1e-2 ...
%                        5e-2 5e-2 5e-2 ...
%                        1e-10 1e-10 1e-10 ...
%                        1e-6 1e-6 1e-6]); 
                   
       P_hat = diag([1e-1 * ones(1, 3) 1e-2 * ones(1, 3) 5e-2 * ones(1, 3) 1e-10 * ones(1, 3) 1e-6 * ones(1, 3) 1e-6 * ones(1, 3)]);  % Initial error covariance

       delta_x = 0;
%        delta_q = 0;
       
    else
%             
%           A = [  Z3    I3        Z3                                   Z3       Z3    Z3    % dp
%                  Z3    Z3     -R_nb    -R_nb*Smtrx(f_b_imu - bacc_b_ins)       Z3    I3    % dv
%                  Z3    Z3        Z3                                   Z3       Z3    Z3    % dbacc
%                  Z3    Z3        Z3      -Smtrx(omega_b_imu - bars_b_ins)     -I3    Z3    % dtheta ???????
%                  Z3    Z3        Z3                                   Z3       Z3    Z3    % dbars
%                  Z3    Z3        Z3                                   Z3       Z3    Z3] ; % dg
            
          A = [  Z3    I3            Z3                                       Z3           Z3  Z3  % dp
                 Z3    Z3     -R_nb_hat    -R_nb_hat*Smtrx(f_b_imu - bacc_b_ins)           Z3  I3 % dv
                 Z3    Z3  -(1/Tacc)*I3                                       Z3           Z3  Z3 % dbacc
                 Z3    Z3            Z3         -Smtrx(omega_b_imu - bars_b_ins)          -I3  Z3 % dtheta ???????
                 Z3    Z3            Z3                                       Z3 -(1/Tacc)*I3  Z3   % dbars
                 Z3    Z3            Z3                                       Z3           Z3  Z3]; % dg
             
            
 
          E = [        Z3      Z3    Z3   Z3
                -R_nb_hat      Z3    Z3   Z3    % w_acc
                       Z3      I3    Z3   Z3    % w_acc_bias
                       Z3      Z3   -I3   Z3    % w_ars
                       Z3      Z3    Z3   I3  % w_ars_bias
                       Z3      Z3    Z3   Z3 ]; 

          
%           H = [ I3 Z3 Z3 Z3 Z3 Z3
%                 I3 Z3 Z3 I3 Z3 Z3];

          % Ground Speed 
          z13 = [0 0 0];
          
          H_gss = [ 0, 0, 0, (R_nb_hat(1,2)*(R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b) + R_nb_hat(1,1)*(R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b))/((R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b)^2 + (R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b)^2)^(1/2), (R22*(R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b) + R_nb_hat(1,3)*(R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b))/((R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b)^2 + (R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b)^2)^(1/2), (R32*(R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b) + R31*(R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b))/((R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b)^2 + (R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b)^2)^(1/2), 0, 0, 0, ((R_nb_hat(1,3)*vx_n + R23*vy_n + R33*vz_n)*(R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b))/((R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b)^2 + (R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b)^2)^(1/2), -((R_nb_hat(1,3)*vx_n + R23*vy_n + R33*vz_n)*(R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b))/((R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b)^2 + (R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b)^2)^(1/2), -(2*(R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n)*(R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b) - 2*(R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n)*(R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b))/(2*((R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b)^2 + (R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b)^2)^(1/2)), (rz_b*(R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b))/((R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b)^2 + (R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b)^2)^(1/2), -(rz_b*(R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b))/((R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b)^2 + (R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b)^2)^(1/2), -(rx_b*(R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b) - ry_b*(R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b))/((R_nb_hat(1,2)*vx_n + R22*vy_n + R32*vz_n - b_arsz_b*rx_b + b_arsx_b*rz_b - ox_imu_b*rz_b + oz_imu_b*rx_b)^2 + (R_nb_hat(1,1)*vx_n + R_nb_hat(1,3)*vy_n + R31*vz_n + b_arsz_b*ry_b - b_arsy_b*rz_b + oy_imu_b*rz_b - oz_imu_b*ry_b)^2)^(1/2)];
          
          
          
          H = [ I3         Z3  Z3 -R_nb_hat*Smtrx(r_b_1)         Z3 Z3   % gnss_1
                I3         Z3  Z3 -R_nb_hat*Smtrx(r_b_2)         Z3 Z3   % gnss_2
                z13  H_gss_vel  z13              H_gss_att H_gss_bars z13]; % ground_speed
%                 Z3 Z3 Z3                     I3 Z3]; % delta_theta
               
%          M = rref(obsv(A,H))  
         rank(obsv(A,H))

          
          % Discrete-time model
         Ad = eye(18) + h * A;
        
         % KF gain
         K = P_hat * H' / (H * P_hat * H' + R);

         % corrector 
         delta_x = K * delta_y;
         P_hat = (eye(18)-K*H) * P_hat * (eye(18) - K*H)' + K*R*K';
        
         % ESKF reset
         delta_theta = delta_x(10:12);
         G = [ I3 Z3 Z3                            Z3 Z3 Z3 
               Z3 I3 Z3                            Z3 Z3 Z3
               Z3 Z3 I3                            Z3 Z3 Z3
               Z3 Z3 Z3 (I3 - Smtrx(0.5*delta_theta)) Z3 Z3
               Z3 Z3 Z3                            Z3 I3 Z3
               Z3 Z3 Z3                            Z3 Z3 I3];
           
         P_hat = G * P_hat * G';
        
        
        % Covariance predictor (k+1)
        Qd = 0.5 * (Ad * E_prev * Q * E_prev' * Ad' + E * Q * E') * h;
        P_hat = Ad * P_hat * Ad' + Qd;
        P_hat = (P_hat + P_hat')/2;

             
    end
end